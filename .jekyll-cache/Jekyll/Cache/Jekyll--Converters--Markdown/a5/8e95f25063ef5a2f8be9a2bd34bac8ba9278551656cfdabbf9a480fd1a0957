I"/<h1 id="test">test</h1>

<p>Ruby on Rails는 테스트 자동생성을 포함하고 있다.
Model이나 Controller가 생성될 때 skeleton test code를 함께 만들기 때문에 쉽게 테스트를 작성하고 진행할 수 있다.
test 관련 파일들은 /test/ 안에 존재한다.</p>

<h1 id="fixtures">fixtures</h1>

<p>Ruby on Rails가 테스트를 진행할 때 data는 DB에서 가져오지 않는다.
/test/fixtures/에 위치한 fixtures에서 가져오게 된다.
그렇기 때문에 Model 테스트를 위해서는 fixtures를 미리 설정해야 한다.
fixtures는 테스트할 때 사용할 만큼만 생성하면 된다.
ERB도 사용할 수 있기 때문에, 여러 데이터가 필요할 경우 반복문을 활용할 수 있다.
아래의 fixture는 예시이다.</p>

<figure class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="na">one</span><span class="pi">:</span>
  <span class="na">title</span><span class="pi">:</span> <span class="s">MyString</span>
  <span class="na">description</span><span class="pi">:</span> <span class="s">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>
  <span class="na">posted_at</span><span class="pi">:</span> <span class="s">2019-02-13</span>
  <span class="na">category</span><span class="pi">:</span> <span class="s">1</span></code></pre></figure>

<p>참고: <a href="https://api.rubyonrails.org/v2.3/classes/Fixtures.html">https://api.rubyonrails.org/v2.3/classes/Fixtures.html</a></p>

<h1 id="models-test">models test</h1>

<p>/test/models/에 위치한다.
MVC의 M에 해당하는 테스트를 진행한다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">setup</span> <span class="k">do</span>
  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"title"</span><span class="p">,</span> <span class="ss">description: </span><span class="s2">"Lorem ipsum dolor sit amet, consectetur adipiscing elit."</span><span class="p">,</span> <span class="ss">posted_at: </span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span> <span class="ss">category: </span><span class="mi">1</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should be valid"</span> <span class="k">do</span>
  <span class="n">assert</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">valid?</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"title should be present"</span> <span class="k">do</span>
  <span class="vi">@post</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="s2">"   "</span>
  <span class="n">assert_not</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">valid?</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"title should be shorter than 60"</span> <span class="k">do</span>
  <span class="vi">@post</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="s2">"a"</span> <span class="o">*</span> <span class="mi">61</span>
  <span class="n">assert_not</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">valid?</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"category should be integer"</span> <span class="k">do</span>
  <span class="n">invalid_categories</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="mf">2.71828</span><span class="p">]</span>
  <span class="n">invalid_categories</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">invalid_category</span><span class="o">|</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">category</span> <span class="o">=</span> <span class="n">invalid_category</span>
    <span class="n">assert_not</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">valid?</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">invalid_category</span><span class="p">.</span><span class="nf">inspect</span><span class="si">}</span><span class="s2"> is invalid."</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h1 id="controllers-test">controllers test</h1>

<p>/test/controllers/에 위치한다.
MVC 패턴의 C, V에 해당하는 테스트를 진행한다.</p>

<h2 id="request-handling-test">request handling test</h2>

<p>controller가 수행하는 기능에 대한 테스트를 진행한다.
get, post, patch, put, head, delete에 대해 진행할 수 있다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">setup</span> <span class="k">do</span>
  <span class="vi">@post</span> <span class="o">=</span> <span class="n">posts</span><span class="p">(</span><span class="ss">:one</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should get index"</span> <span class="k">do</span>
  <span class="n">get</span> <span class="n">posts_url</span>
  <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should show post"</span> <span class="k">do</span>
  <span class="n">get</span> <span class="n">post_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span>
  <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should create post"</span> <span class="k">do</span>
  <span class="n">assert_difference</span><span class="p">(</span><span class="s1">'Post.count'</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">post</span> <span class="n">posts_url</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">post: </span><span class="p">{</span> <span class="ss">title: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="ss">description: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">description</span><span class="p">,</span> <span class="ss">posted_at: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">posted_at</span><span class="p">,</span> <span class="ss">category: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">category</span> <span class="p">}}</span>
  <span class="k">end</span>
  <span class="n">assert_redirect_to</span> <span class="n">post_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should update post"</span> <span class="k">do</span>
  <span class="n">patch</span> <span class="n">posts_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">),</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">post: </span><span class="p">{</span> <span class="ss">title: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="ss">description: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">description</span><span class="p">,</span> <span class="ss">posted_at: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">posted_at</span><span class="p">,</span> <span class="ss">category: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">category</span> <span class="p">}}</span>
  <span class="n">assert_redirected_to</span> <span class="n">post_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should destroy post"</span> <span class="k">do</span>
  <span class="n">assert_difference</span><span class="p">(</span><span class="s1">'Post.count'</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">delete</span> <span class="n">post_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">assert_redirected_to</span> <span class="n">posts_url</span>
<span class="k">end</span></code></pre></figure>

<h2 id="routes-test">routes test</h2>

<p>Routing 테스트.
routes 선언이 제대로 되어 있는지 확인한다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">test</span> <span class="s2">"should get home"</span> <span class="k">do</span>
  <span class="n">get</span> <span class="n">root_url</span>
  <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should get about"</span> <span class="k">do</span>
  <span class="n">get</span> <span class="n">about_url</span>
  <span class="n">assert_response</span> <span class="ss">:success</span>
<span class="k">end</span></code></pre></figure>

<h2 id="views-test">views test</h2>

<p>View에 대한 테스트도 /test/controllers/ 안에서 진행한다.
assert_selector를 활용하여 여러 요소를 테스트할 수 있다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">test</span> <span class="s2">"should display home title"</span>
  <span class="n">get</span> <span class="n">root_path</span>
  <span class="n">assert_select</span> <span class="s2">"title"</span><span class="p">,</span> <span class="s2">"섭사장의 블로그"</span>
<span class="k">end</span>

<span class="nb">test</span> <span class="s2">"should provide links"</span> <span class="k">do</span>
  <span class="n">get</span> <span class="n">root_path</span>
  <span class="n">assert_select</span> <span class="s2">"a[href=?]"</span><span class="p">,</span> <span class="n">root_path</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">2</span>
  <span class="n">assert_select</span> <span class="s2">"a[href=?]"</span><span class="p">,</span> <span class="n">about_path</span>
<span class="k">end</span></code></pre></figure>

<h1 id="helpers-test">helpers test</h1>

<p>Ruby on Rails helper에 대한 테스트를 진행한다.
Helper는 app/helpers에 있으며, 주로 application의 view에서 사용하는 module이다.
helpers에 대한 테스트는 /test/helpers에 위치한다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">test</span> <span class="s2">"should return the full title"</span> <span class="k">do</span>
  <span class="n">assert_equal</span> <span class="n">full_title</span><span class="p">(</span><span class="s2">"About"</span><span class="p">),</span> <span class="s2">"About | 섭사장의 블로그"</span>
<span class="k">end</span></code></pre></figure>

<h1 id="integration-test">integration test</h1>

<p>Integration test는 workflow를 테스트 한다.
/test/integration에 위치한다.
아래 명령어를 통해 생성할 수 있다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rails generate integration_test user_flows</code></pre></figure>

<p>앞에서 사용한 다양한 테스트들을 조합해 만들어 사용한다.</p>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://guides.rubyonrails.org/testing.html">https://guides.rubyonrails.org/testing.html</a></li>
</ul>
:ET