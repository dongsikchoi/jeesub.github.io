I"D<p>Ruby on Rails 어플리케이션에서 특정 이벤트 발생시 slack으로 알림을 주는 간단한 기능을 구현하려고 한다.</p>

<h1 id="slack-메시지">slack 메시지</h1>

<p>slack에 메시지를 보내기 위해서는 세 가지 중 한 방법을 사용하면 된다.</p>

<ol>
  <li>slack 어플리케이션을 이용해 메시지를 보낸다.</li>
  <li>slack Web API를 사용한다.</li>
  <li>slack incoming webhooks를 사용한다.</li>
</ol>

<p>참고: <a href="https://api.slack.com/docs/messages">https://api.slack.com/docs/messages</a></p>

<p>slack Web API는 slack의 다양한 기능을 외부에서 제어할 때 유용하다. 
간단한 메시지만을 전달하고자 하면 slack incoming webhooks로 충분하다. 
일단은 메시지만 전달하기 위해 incoming webhook을 사용해보았다.</p>

<h1 id="slack-incoming-webhooks">slack incoming webhooks</h1>

<p><a href="https://api.slack.com/incoming-webhooks">https://api.slack.com/incoming-webhooks</a></p>

<p>slack 공식 문서에 따르면, 총 네 단계를 따르면 끝이 난다.</p>

<ol>
  <li>slack app을 만든다.</li>
  <li>incoming webhook을 활성화한다.</li>
  <li>incoming webhook을 만든다.</li>
  <li>incoming webhook을 사용한다.</li>
</ol>

<h2 id="1-slack-app을-만든다">1. slack app을 만든다.</h2>

<p><a href="https://api.slack.com/apps/new">https://api.slack.com/apps/new</a>로 접속해서 새로운 앱을 만든다. 
앱 이름을 정해주고, 앱을 사용하고자 하는 workspace를 선택한다.</p>

<h2 id="2-incoming-webhook을-활성화한다">2. incoming webhook을 활성화한다.</h2>

<p>앱을 선택하고 나오는 화면에서 incoming webhook을 선택하고 활성화한다.</p>

<h2 id="3-incoming-webhook을-만든다">3. incoming webhook을 만든다.</h2>

<p>활성화 화면에서 맨 아래로 내려가면 Add New Webhook to Workspace 버튼이 있다. 
클릭해서 새로운 webhook을 만든다. 
post 채널을 선택하도록 나오는데, 실험용 채널을 먼저 선택해서 테스트하고, 정상 작동하면 실제 채널에 적용하면 된다.</p>

<h2 id="4-incoming-webhook을-사용한다">4. incoming webhook을 사용한다.</h2>

<p>incoming webhook을 만들면 URI가 하나 주어진다. 이 URI로 post 요청을 보내면 사용이 된다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s1">'Content-type: application/json'</span> <span class="nt">--data</span> <span class="s1">'{"text":"Hello, World!"}'</span> https://hooks.slack.com/services/XXXXX/XXXX/XXXX</code></pre></figure>

<p>본인의 설정에 맞게 테스트해보면, slack 메시지를 받을 수 있다.</p>

<h1 id="ruby-on-rails에서-post-요청하기">Ruby on Rails에서 POST 요청하기</h1>

<p>Ruby on Rails 어플리케이션과 연동하려면, ruby의 net::http를 활용하면 된다. 
slack API 문서에 주어진 요소들을 넣어서 ruby code로 만들었다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'net/http'</span>

<span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="s2">"https://hooks.slack.com/services/XXXXX/XXXX/XXXX"</span><span class="p">)</span>

<span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="nf">host</span><span class="p">,</span> <span class="n">uri</span><span class="p">.</span><span class="nf">port</span><span class="p">,</span> <span class="ss">:use_ssl</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
  <span class="n">req</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Post</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
  <span class="n">req</span><span class="p">.</span><span class="nf">content_type</span> <span class="o">=</span> <span class="s1">'application/json'</span>
  <span class="n">req</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="s2">"{'text':'Hello, World!'}"</span>
  <span class="n">http</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
<span class="k">end</span></code></pre></figure>

<p>참고: <a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/net/http/rdoc/Net/HTTP.html">https://ruby-doc.org/stdlib-2.5.1/libdoc/net/http/rdoc/Net/HTTP.html</a></p>

<p>ruby의 http 접속 기능을 활용하기 때문에, 안정적으로 사용하려면 active job, queue 등을 활용하는 것이 좋을 것 같다.</p>
:ET