I"W<h1 id="controller-module">Controller Module</h1>

<p>Ruby on Rails application을 만들다보면, Controller가 많아진다. 
이 때 module로 관리하면 정돈해서 사용할 수 있다.</p>

<h1 id="시작부터-controller-module-생성하기">시작부터 controller module 생성하기</h1>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rails generate controller Admin::Posts</code></pre></figure>

<p>위와 같은 명령어를 통해 app/controllers/admin/posts_controller.rb를 생성할 수 있다. 
view 파일들은 app/views/admin/posts/에 만들면 된다. 
view helper의 경우, admin_posts_path, admin_post_path(:id)와 같은 형태가 된다.</p>

<h1 id="이미-사용중인-view-controller를-module로-변경하는-법">이미 사용중인 View, Controller를 module로 변경하는 법</h1>

<p>scaffold로 만든 파일들을 모듈로 관리하려고 변경할 경우, routes, View files, Controller files, test files를 수정해야 한다.</p>

<h2 id="controller-module로-바꾸기">controller module로 바꾸기</h2>

<p>controller 파일의 위치를 /app/controllers/admin/ 아래로 옮겨준다. 
그리고 class 상속을 다음과 같이 바꿔준다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span></code></pre></figure>

<p>해당하는 view 파일들도 app/views/admin/ 아래로 옮겨준다.</p>

<h2 id="routes-수정하기">routes 수정하기</h2>

<p>/admin/post URL을 사용하고자 하기 위해 routes.rb 파일을 다음과 같이 수정한다. 
namespace 안에 다른 controller들을 넣으면 마찬가지로 /admin/ URL을 사용할 수 있다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">namespace</span> <span class="ss">:admin</span> <span class="k">do</span>
	<span class="n">resources</span> <span class="ss">:posts</span>
 <span class="k">end</span></code></pre></figure>

<h2 id="view-파일의-path-수정하기">view 파일의 path 수정하기</h2>

<p>view 파일의 path들을 잘 수정해줘야 한다.</p>

<p>다음과 같이 사용하던 path 요소들을</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@posts</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
  <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">post</span>
  <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_post_path</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
  <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="ss">method: :delete</span>
<span class="k">end</span></code></pre></figure>

<p>아래와 같이 수정한다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@posts</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
  <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">admin_post_path</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
  <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_admin_post_path</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
  <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">admin_post_path</span><span class="p">(</span><span class="n">post</span><span class="p">),</span> <span class="ss">method: :delete</span>
<span class="k">end</span></code></pre></figure>

<h2 id="form-수정하기">form 수정하기</h2>

<p>form의 경우</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">form_with</span><span class="p">(</span><span class="ss">model: </span><span class="n">post</span><span class="p">,</span> <span class="ss">local: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span></code></pre></figure>

<p>와 같이 되어있는 form의 시작 부분을 변경해준다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">form_with</span><span class="p">(</span><span class="ss">model: </span><span class="p">[</span> <span class="ss">:admin</span><span class="p">,</span> <span class="vi">@post</span> <span class="p">],</span> <span class="ss">local: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span></code></pre></figure>

<h2 id="controller-redirect-수정하기">controller redirect 수정하기</h2>

<p>controller의 redirect_to method에서도 helper들을 변경해주어야 한다.</p>

<h3 id="-scaffold로-만들었을-때-수정해야할-파일들">* scaffold로 만들었을 때, 수정해야할 파일들</h3>

<p>routes.rb, posts_controller.rb, index.html.erb, new.html.erb, show.html.erb, edit.html.erb, _form.html.erb</p>

<h2 id="test-files-수정하기">test files 수정하기</h2>

<p>/test/controllers 안에 /admin 폴더를 만들고, test files를 옮겨준다. 
class 상속을 다음과 같이 바꿔준다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">PostsControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">IntegrationTest</span></code></pre></figure>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with">http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with</a></li>
</ul>
:ET